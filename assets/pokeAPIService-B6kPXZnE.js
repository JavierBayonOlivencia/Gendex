var l=Object.defineProperty;var g=(a,t,e)=>t in a?l(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var s=(a,t,e)=>g(a,typeof t!="symbol"?t+"":t,e);const m=a=>Number(a.split("/")[6]);class p{constructor(){s(this,"POKEAPI","https://pokeapi.co/api/v2/");s(this,"cache",new Map);s(this,"cacheTTL",5*60*1e3)}async fetchData(t){const e=Date.now();if(this.cache.has(t)){const{data:n,timestamp:i}=this.cache.get(t);if(e-i<this.cacheTTL)return n;this.cache.delete(t)}const o=await fetch(t);if(!o.ok){const n=await o.text();throw console.error(`Error fetching data from ${t}: ${n}`),new Error(`Error fetching data from ${t}: ${o.status} - ${o.statusText}`)}const r=await o.json();return this.cache.set(t,{data:r,timestamp:e}),r}async getPokemon(t){const e=`pokemon/${t}`;return this.fetchData(`${this.POKEAPI}${e}`)}async getPokemonType(t){const e=`type/${t}`;return this.fetchData(`${this.POKEAPI}${e}`)}async getPokemonSpecies(t){const e=`pokemon-species/${t}`;return this.fetchData(`${this.POKEAPI}${e}`)}async getPokemonLocation(t){const e=`pokemon/${t}/encounters/`;return this.fetchData(`${this.POKEAPI}${e}`)}async getPokemonEvolutionChain(t){const e=`evolution-chain/${t}`;return this.fetchData(`${this.POKEAPI}${e}`)}async getAllPokemonGenerations(){return this.fetchData(`${this.POKEAPI}generation`)}async getPokemonGeneration(t){const e=`generation/${t==="1"?`${t}/`:t}`;return this.fetchData(`${this.POKEAPI}${e}`)}async getPokemonMove(t){const e=`move/${t}`;return this.fetchData(`${this.POKEAPI}${e}`)}}class u{constructor(){s(this,"apiClient");this.apiClient=new p}async getPokemonInfo(t){try{const e=await this.apiClient.getPokemon(t);return{id:e.id,name:e.name,height:e.height,weight:e.weight,types:e.types,sprites:e.sprites,stats:e.stats,order:e.order,moves:e.moves,species:e.species}}catch(e){throw console.error("Error fetching Pokemon info:",e),new Error("Failed to fetch Pokemon info.")}}async getTypeInfo(t){try{const e=await this.apiClient.getPokemonType(t);return{name:e.name,doubleDamageFrom:e.damage_relations.double_damage_from.map(o=>o.name),halfDamageFrom:e.damage_relations.half_damage_from.map(o=>o.name),noDamageFrom:e.damage_relations.no_damage_from.map(o=>o.name),doubleDamageTo:e.damage_relations.double_damage_to.map(o=>o.name),halfDamageTo:e.damage_relations.half_damage_to.map(o=>o.name),noDamageTo:e.damage_relations.no_damage_to.map(o=>o.name)}}catch(e){throw console.error("Error fetching Type info:",e),new Error("Failed to fetch Type info.")}}async getSpeciesInfo(t){try{const e=await this.apiClient.getPokemonSpecies(t),o=e.flavor_text_entries.filter(n=>n.language.name==="en")[0].flavor_text,r=m(e.evolution_chain.url);return{flavorTextEntries:o,evolutionChainId:r,varieties:e.varieties.map(n=>n)}}catch(e){throw console.error("Error fetching Species info:",e),new Error("Failed to fetch Species info.")}}async getLocationInfo(t){try{return{encounters:await this.apiClient.getPokemonLocation(t)}}catch(e){throw console.error("Error fetching Location info:",e),new Error("Failed to fetch Location info.")}}async getEvolutionChain(t){try{const e=await this.apiClient.getPokemonEvolutionChain(t),o=new Map,r=n=>{const i=m(n.species.url),c=n.species.name;n.evolution_details.length===0&&o.set(i.toString(),{id:i,name:c,minLevel:null,trigger:null}),n.evolution_details.forEach(h=>{o.set(i.toString(),{id:i,name:c,minLevel:h.min_level,trigger:h.trigger.name})}),n.evolves_to.forEach(r)};return r(e.chain),{chain:Array.from(o.values())}}catch(e){throw console.error("Error fetching Evolution chain:",e),new Error("Failed to fetch Evolution chain.")}}async getGenerations(){try{const t=await this.apiClient.getAllPokemonGenerations();return{count:t.count,results:t.results}}catch(t){throw console.error("Error fetching All Generations info:",t),new Error("Failed to fetch Generation info.")}}async getGeneration(t){try{const e=await this.apiClient.getPokemonGeneration(t);return{main_region:e.main_region,pokemon_species:e.pokemon_species}}catch(e){throw console.error("Error fetching Generation info:",e),new Error("Failed to fetch Generation info.")}}async getMoves(t){try{const e=await this.apiClient.getPokemonMove(t);return{name:e.name,accuracy:e.accuracy,power:e.power,pp:e.pp,type:e.type,generation:e.generation,damage_class:e.damage_class}}catch(e){throw console.error("Error fetching Moves info:",e),new Error("Failed to fetch Moves info.")}}}export{u as P,m as e};
